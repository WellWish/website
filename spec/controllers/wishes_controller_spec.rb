require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe WishesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Wish. As you add validations to Wish, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    attributes_for :wish
  end

  let(:invalid_attributes) do
    { title: "", description: "", criteria: "" }
  end

  let(:user) { create :user }

  describe "GET #index" do
    let(:wish) { create :wish }

    it "assigns all wishes as @wishes" do
      get :index, params: {}
      expect(assigns(:wishes)).to eq([wish])
    end
  end

  describe "GET #show" do
    let(:wish) { create :wish }

    it "assigns the requested wish as @wish" do
      get :show, params: { id: wish.to_param }
      expect(assigns(:wish)).to eq(wish)
    end
  end

  describe "GET #new" do
    it "assigns a new wish as @wish" do
      sign_in user
      get :new, params: {}
      expect(assigns(:wish)).to be_a_new(Wish)
    end
  end

  describe "GET #edit" do
    let(:wish) { create :wish }

    it "assigns the requested wish as @wish" do
      sign_in user
      get :edit, params: { id: wish.to_param }
      expect(assigns(:wish)).to eq(wish)
    end
  end

  describe "POST #create" do
    before(:each) { sign_in user }

    context "with valid params" do
      it "creates a new Wish" do
        expect do
          post :create, params: { wish: valid_attributes }
        end.to change(Wish, :count).by(1)
      end

      it "assigns a newly created wish as @wish" do
        post :create, params: { wish: valid_attributes }
        expect(assigns(:wish)).to be_a(Wish)
        expect(assigns(:wish)).to be_persisted
      end

      it "redirects to the created wish" do
        post :create, params: { wish: valid_attributes }
        expect(response).to redirect_to(Wish.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved wish as @wish" do
        post :create, params: { wish: invalid_attributes }
        expect(assigns(:wish)).to be_a_new(Wish)
      end

      it "re-renders the 'new' template" do
        post :create, params: { wish: invalid_attributes }
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before(:each) { sign_in user }

    context "with valid params" do
      let(:wish) { create :wish }
      let(:new_attributes) do
        { title: "New title", description: "New description",
          criteria: "New criteria" }
      end

      it "updates the requested wish" do
        put :update, params: { id: wish.to_param, wish: new_attributes }
        wish.reload
        expect(wish.title).to eq "New title"
        expect(wish.description).to eq "New description"
        expect(wish.criteria).to eq "New criteria"
      end

      it "assigns the requested wish as @wish" do
        put :update, params: { id: wish.to_param, wish: valid_attributes }
        expect(assigns(:wish)).to eq(wish)
      end

      it "redirects to the wish" do
        put :update, params: { id: wish.to_param, wish: valid_attributes }
        expect(response).to redirect_to(wish)
      end
    end

    context "with invalid params" do
      let(:wish) { create :wish }

      it "assigns the wish as @wish" do
        put :update, params: { id: wish.to_param, wish: invalid_attributes }
        expect(assigns(:wish)).to eq(wish)
      end

      it "re-renders the 'edit' template" do
        put :update, params: { id: wish.to_param, wish: invalid_attributes }
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each) { sign_in user }

    it "destroys the requested wish" do
      wish = create(:wish)

      expect do
        delete :destroy, params: { id: wish.to_param }
      end.to change(Wish, :count).by(-1)
    end

    it "redirects to the wishes list" do
      wish = create(:wish)

      delete :destroy, params: { id: wish.to_param }
      expect(response).to redirect_to(wishes_url)
    end
  end
end
